{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/scripts/clickListeners.ts","bundle.js","app/scripts/directions.ts","app/scripts/drawing.ts","app/scripts/gradient.ts","app/scripts/main.ts","app/scripts/map.ts","app/scripts/mapscript.ts","app/scripts/placesSearch.ts","app/scripts/styledMap.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","map","drawingFunctions","loadAllDrawingButtons","drawing_buttons","forEach","btn","parent","type","img_btn","document","createElement","id","concat","name","tabIndex","setAttribute","src","img","addEventListener","ev","clearAll","draw","appendChild","createImgButton","drawing","listenersForControlButtons","getElementById","event","city","changeType","toggleMasts","toggleClusters","toggleHeatmap","target","changeHeatmapRadius","parseInt","changeCluster","./map","2","directionCalculator","directionsService","google","maps","DirectionsService","directionsRenderer","DirectionsRenderer","onChangeHandler","service","origin","destination","route","query","travelMode","TravelMode","DRIVING","response","status","setDirections","getDistanceMatrix","origins","destinations","unitSystem","UnitSystem","METRIC","alert","textContent","rows","elements","distance","text","duration","window","calculateAndDisplayRoute","autocomplete_input_origin","autocomplete_input_destination","setMap","DistanceMatrixService","autocomplete_origin","places","Autocomplete","autocomplete_destination","setFields","addListener","place","getPlace","geometry","3","drawingManager","drawingLayer","allOverlays","listenForDrawing","DrawingManager","drawingMode","drawingControl","Data","push","overlay","add","Feature","Polygon","getPath","getArray","data","bounds","getBounds","points","getSouthWest","lat","lng","getNorthEast","LineString","properties","radius","getRadius","Point","getCenter","getPosition","console","log","setDrawingMode","OverlayType","MARKER","point","url","scaledSize","Size","setOptions","markerOptions","icon","clickable","draggable","cat","POLYGON","polygonOptions","fillColor","fillOpacity","strokeWeight","strokeColor","editable","RECTANGLE","rectangleOptions","POLYLINE","polylineOptions","CIRCLE","circleOptions","toGeoJson","obj","content","fileName","file","Blob","href","URL","createObjectURL","download","click","JSON","stringify","4","customGradient","5","mapscript_1","clickListeners","map_1","initMap","Map","backgroundColor","mapTypeControl","streetViewControl","zoomControl","FunWithMaps","loadMapScript","./clickListeners","./mapscript","6","this_map","london","markerClusterer","heatmap","lettings","styledMap","drawing_1","placesSearch_1","directions_1","gradient_1","dark_theme","markers","mastsVisible","clustersVisible","heatmapVisible","coords","x","y","LatLng","darkmap","StyledMapType","setCenter","mapTypes","set","setMapTypeId","controls","legend","drawingControls","katlink","place_search","ControlPosition","LEFT_TOP","BOTTOM_LEFT","TOP_RIGHT","BOTTOM_RIGHT","TOP_CENTER","placesSearch","fetch","then","json","response_masts","marker","Marker","InfoWindow","error","loadAllMarkers","heatmapData","location","parseFloat","weight","visualization","HeatmapLayer","clearMarkers","MarkerClusterer","imagePath","setGridSize","heatmap_radius","clust_num","./directions","./drawing","./gradient","./placesSearch","./styledMap","7","libraries","script","body","autocomplete_input","autocomplete","bindTo","anchorPoint","setVisible","viewport","fitBounds","setZoom","setPosition","infowindow","infowindowContent","setContent","address","address_components","short_name","join","open","strictBounds","checked","9","elementType","stylers","color","visibility","featureType"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import * as map from \"./map\";\nimport * as drawingFunctions from \"./drawing\";\n\nexport function loadAllDrawingButtons() {\n  drawing_buttons.forEach((btn: { name: string; img: string }) => {\n    createImgButton(btn, drawing, btn.name === \"clear\" ? \"clear\" : \"draw\");\n  });\n}\n\nexport function listenersForControlButtons() {\n  document\n    .getElementById(\"city-lon\")\n    .addEventListener(\"click\", (event: MouseEvent) => {\n      map.city(\"lon\");\n    });\n  document\n    .getElementById(\"city-man\")\n    .addEventListener(\"click\", (event: MouseEvent) => {\n      map.city(\"man\");\n    });\n  document\n    .getElementById(\"lights\")\n    .addEventListener(\"click\", (event: MouseEvent) => {\n      map.changeType();\n    });\n  document\n    .getElementById(\"masts-toggle\")\n    .addEventListener(\"click\", (event: MouseEvent) => {\n      map.toggleMasts();\n    });\n  document\n    .getElementById(\"cluster-toggle\")\n    .addEventListener(\"click\", (event: MouseEvent) => {\n      map.toggleClusters();\n    });\n  document\n    .getElementById(\"heatmap-toggle\")\n    .addEventListener(\"click\", (event: MouseEvent) => {\n      map.toggleHeatmap();\n    });\n\n  document.getElementById(\"heatmap-range\").addEventListener(\"change\", event => {\n    const target: HTMLInputElement = event.target as HTMLInputElement;\n    map.changeHeatmapRadius(parseInt(target.value));\n  });\n\n  document.getElementById(\"cluster-range\").addEventListener(\"change\", event => {\n    const target: HTMLInputElement = event.target as HTMLInputElement;\n    map.changeCluster(parseInt(target.value));\n  });\n}\n\nconst drawing = document.getElementById(\"drawingControls\");\nconst drawing_buttons = [\n  {\n    name: \"marker\",\n    img: \"point\"\n  },\n  {\n    name: \"polygon\",\n    img: \"polygon\"\n  },\n  {\n    name: \"square\",\n    img: \"square\"\n  },\n  {\n    name: \"circle\",\n    img: \"circle\"\n  },\n  {\n    name: \"polyline\",\n    img: \"line\"\n  },\n  {\n    name: \"cat\",\n    img: \"cat\"\n  },\n  {\n    name: \"pan\",\n    img: \"pan\"\n  },\n  {\n    name: \"save\",\n    img: \"save\"\n  },\n  {\n    name: \"clear\",\n    img: \"clear\"\n  }\n];\n\nfunction createImgButton(\n  btn: { name: string; img: string },\n  parent: HTMLElement,\n  type: string\n) {\n  const img_btn = document.createElement(\"img\");\n  img_btn.id = `${btn.name}-control`;\n  img_btn.tabIndex = 0;\n  img_btn.setAttribute(\"role\", \"button\");\n  if (type === \"clear\") {\n    img_btn.src = `assets/img/${btn.img}.svg`;\n    img_btn.addEventListener(\"click\", (ev: MouseEvent) => {\n      drawingFunctions.clearAll();\n    });\n  } else {\n    img_btn.src = `assets/img/${btn.img}.png`;\n    img_btn.addEventListener(\"click\", (ev: MouseEvent) => {\n      drawingFunctions.draw(btn.name);\n    });\n  }\n  parent.appendChild(img_btn);\n}\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst map = require(\"./map\");\nconst drawingFunctions = require(\"./drawing\");\nfunction loadAllDrawingButtons() {\n    drawing_buttons.forEach((btn) => {\n        createImgButton(btn, drawing, btn.name === \"clear\" ? \"clear\" : \"draw\");\n    });\n}\nexports.loadAllDrawingButtons = loadAllDrawingButtons;\nfunction listenersForControlButtons() {\n    document\n        .getElementById(\"city-lon\")\n        .addEventListener(\"click\", (event) => {\n        map.city(\"lon\");\n    });\n    document\n        .getElementById(\"city-man\")\n        .addEventListener(\"click\", (event) => {\n        map.city(\"man\");\n    });\n    document\n        .getElementById(\"lights\")\n        .addEventListener(\"click\", (event) => {\n        map.changeType();\n    });\n    document\n        .getElementById(\"masts-toggle\")\n        .addEventListener(\"click\", (event) => {\n        map.toggleMasts();\n    });\n    document\n        .getElementById(\"cluster-toggle\")\n        .addEventListener(\"click\", (event) => {\n        map.toggleClusters();\n    });\n    document\n        .getElementById(\"heatmap-toggle\")\n        .addEventListener(\"click\", (event) => {\n        map.toggleHeatmap();\n    });\n    document.getElementById(\"heatmap-range\").addEventListener(\"change\", event => {\n        const target = event.target;\n        map.changeHeatmapRadius(parseInt(target.value));\n    });\n    document.getElementById(\"cluster-range\").addEventListener(\"change\", event => {\n        const target = event.target;\n        map.changeCluster(parseInt(target.value));\n    });\n}\nexports.listenersForControlButtons = listenersForControlButtons;\nconst drawing = document.getElementById(\"drawingControls\");\nconst drawing_buttons = [\n    {\n        name: \"marker\",\n        img: \"point\"\n    },\n    {\n        name: \"polygon\",\n        img: \"polygon\"\n    },\n    {\n        name: \"square\",\n        img: \"square\"\n    },\n    {\n        name: \"circle\",\n        img: \"circle\"\n    },\n    {\n        name: \"polyline\",\n        img: \"line\"\n    },\n    {\n        name: \"cat\",\n        img: \"cat\"\n    },\n    {\n        name: \"pan\",\n        img: \"pan\"\n    },\n    {\n        name: \"save\",\n        img: \"save\"\n    },\n    {\n        name: \"clear\",\n        img: \"clear\"\n    }\n];\nfunction createImgButton(btn, parent, type) {\n    const img_btn = document.createElement(\"img\");\n    img_btn.id = `${btn.name}-control`;\n    img_btn.tabIndex = 0;\n    img_btn.setAttribute(\"role\", \"button\");\n    if (type === \"clear\") {\n        img_btn.src = `assets/img/${btn.img}.svg`;\n        img_btn.addEventListener(\"click\", (ev) => {\n            drawingFunctions.clearAll();\n        });\n    }\n    else {\n        img_btn.src = `assets/img/${btn.img}.png`;\n        img_btn.addEventListener(\"click\", (ev) => {\n            drawingFunctions.draw(btn.name);\n        });\n    }\n    parent.appendChild(img_btn);\n}\n\n},{\"./drawing\":3,\"./map\":6}],2:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction directionCalculator(map) {\n    const directionsService = new google.maps.DirectionsService();\n    const directionsRenderer = new google.maps.DirectionsRenderer();\n    directionsRenderer.setMap(map);\n    const service = new google.maps.DistanceMatrixService();\n    const autocomplete_input_origin = document.getElementById(\"origin\");\n    const autocomplete_input_destination = document.getElementById(\"destination\");\n    const onChangeHandler = () => {\n        calculateAndDisplayRoute(directionsService, directionsRenderer, service, autocomplete_input_origin, autocomplete_input_destination);\n    };\n    const autocomplete_origin = new google.maps.places.Autocomplete(autocomplete_input_origin);\n    const autocomplete_destination = new google.maps.places.Autocomplete(autocomplete_input_destination);\n    autocomplete_origin.setFields([\n        \"address_components\",\n        \"geometry\",\n        \"icon\",\n        \"name\"\n    ]);\n    autocomplete_destination.setFields([\n        \"address_components\",\n        \"geometry\",\n        \"icon\",\n        \"name\"\n    ]);\n    autocomplete_origin.addListener(\"place_changed\", () => {\n        const place = autocomplete_origin.getPlace();\n        onChangeHandler();\n        if (!place.geometry) {\n            window.alert(\"No details available for input: '\" + place.name + \"'\");\n            return;\n        }\n    });\n    autocomplete_destination.addListener(\"place_changed\", () => {\n        const place = autocomplete_destination.getPlace();\n        onChangeHandler();\n        if (!place.geometry) {\n            window.alert(\"No details available for input: '\" + place.name + \"'\");\n            return;\n        }\n    });\n}\nexports.directionCalculator = directionCalculator;\nfunction calculateAndDisplayRoute(directionsService, directionsRenderer, service, origin, destination) {\n    if (origin.value &&\n        origin.value.length > 0 &&\n        destination.value &&\n        destination.value.length > 0) {\n        /**\n         * Let's take a look at the Directions Service documentation.\n         * See the Directions Request class.\n         * https://developers.google.com/maps/documentation/javascript/reference/directions#DirectionsRequest\n         *\n         * What other options can we add?\n         * Let's change the travel mode.\n         * (https://developers.google.com/maps/documentation/javascript/reference/directions#TravelMode)\n         *\n         * Or, let's keep driving, but avoid tolls.\n         */\n        directionsService.route({\n            origin: { query: origin.value },\n            destination: { query: destination.value },\n            travelMode: google.maps.TravelMode.DRIVING\n        }, (response, status) => {\n            if (status === \"OK\") {\n                directionsRenderer.setDirections(response);\n                service.getDistanceMatrix({\n                    origins: [origin.value],\n                    destinations: [destination.value],\n                    travelMode: google.maps.TravelMode.DRIVING,\n                    unitSystem: google.maps.UnitSystem.METRIC\n                }, (response, status) => {\n                    if (status !== \"OK\") {\n                        alert(\"Error was: \" + status);\n                    }\n                    else {\n                        /**\n                         *\n                         * What's going on here?\n                         * What is the result of the Distance Matrix service?\n                         *\n                         * Take a look here:\n                         * https://developers.google.com/maps/documentation/javascript/reference/distance-matrix#DistanceMatrixResponseElement\n                         *\n                         * Do we want to display anything else?\n                         */\n                        document.getElementById(\"distance\").textContent =\n                            response.rows[0].elements[0].distance.text +\n                                \" \" +\n                                response.rows[0].elements[0].duration.text;\n                    }\n                });\n            }\n            else {\n                window.alert(\"Directions request failed due to \" + status);\n            }\n        });\n    }\n}\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet drawingManager;\nlet drawingLayer;\nlet allOverlays = [];\nfunction listenForDrawing(map) {\n    drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: null,\n        drawingControl: false // i have my custom tools so i don't need the defaults to be displayed\n    });\n    drawingManager.setMap(map);\n    drawingLayer = new google.maps.Data();\n    drawingManager.addListener(\"overlaycomplete\", event => {\n        allOverlays.push(event.overlay);\n        event.overlay.addListener(\"rightclick\", () => {\n            event.overlay.setMap(null);\n        });\n        switch (event.type) {\n            case \"polygon\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([\n                        event.overlay.getPath().getArray()\n                    ])\n                }));\n                /**\n                 * We could do this, here:\n                 *\n                 * drawingLayer.setMap(map);\n                 *\n                 * The reason we are not doing this,\n                 * is because we want to keep the custom icons\n                 * showing. And if we add the data layer on the map,\n                 * it will use the default.\n                 */\n                map.data.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([\n                        event.overlay.getPath().getArray()\n                    ])\n                }));\n                break;\n            case \"rectangle\":\n                let bounds = event.overlay.getBounds();\n                let points = [\n                    bounds.getSouthWest(),\n                    {\n                        lat: bounds.getSouthWest().lat(),\n                        lng: bounds.getNorthEast().lng()\n                    },\n                    bounds.getNorthEast(),\n                    {\n                        lng: bounds.getSouthWest().lng(),\n                        lat: bounds.getNorthEast().lat()\n                    }\n                ];\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([points])\n                }));\n                map.data.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([points])\n                }));\n                break;\n            case \"polyline\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.LineString(event.overlay.getPath().getArray())\n                }));\n                map.data.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.LineString(event.overlay.getPath().getArray())\n                }));\n                break;\n            case \"circle\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    properties: {\n                        radius: event.overlay.getRadius()\n                    },\n                    geometry: new google.maps.Data.Point(event.overlay.getCenter())\n                }));\n                map.data.add(new google.maps.Data.Feature({\n                    properties: {\n                        radius: event.overlay.getRadius()\n                    }\n                }));\n                break;\n            case \"marker\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Point(event.overlay.getPosition())\n                }));\n                break;\n            default:\n                console.log(\"end\");\n        }\n    });\n}\nexports.listenForDrawing = listenForDrawing;\nfunction draw(type) {\n    switch (type) {\n        case \"marker\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n            let point = {\n                url: \"assets/img/point.png\",\n                scaledSize: new google.maps.Size(30, 30)\n            };\n            drawingManager.setOptions({\n                markerOptions: {\n                    icon: point,\n                    clickable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"cat\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n            let cat = {\n                url: \"assets/img/cat.png\",\n                scaledSize: new google.maps.Size(70, 70)\n            };\n            drawingManager.setOptions({\n                markerOptions: {\n                    icon: cat,\n                    clickable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"polygon\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n            drawingManager.setOptions({\n                polygonOptions: {\n                    fillColor: \"#9c4d4f\",\n                    fillOpacity: 0.5,\n                    strokeWeight: 2,\n                    strokeColor: \"#401619\",\n                    clickable: true,\n                    editable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"square\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);\n            drawingManager.setOptions({\n                rectangleOptions: {\n                    fillColor: \"#fff82e\",\n                    fillOpacity: 0.5,\n                    strokeWeight: 2,\n                    strokeColor: \"#c8a535\",\n                    clickable: true,\n                    editable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"polyline\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);\n            drawingManager.setOptions({\n                polylineOptions: {\n                    strokeWeight: 2,\n                    strokeColor: \"#00b801\",\n                    clickable: true,\n                    editable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"circle\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n            drawingManager.setOptions({\n                circleOptions: {\n                    fillColor: \"#00b801\",\n                    fillOpacity: 0.5,\n                    strokeWeight: 2,\n                    strokeColor: \"#00b801\",\n                    clickable: true,\n                    editable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"pan\":\n            drawingManager.setDrawingMode(null);\n            break;\n        case \"save\":\n            drawingManager.setDrawingMode(null);\n            drawingLayer.toGeoJson(obj => {\n                console.log(obj);\n                download(JSON.stringify(obj), \"drawingData.txt\");\n            });\n            break;\n        default:\n            drawingManager.setDrawingMode(null);\n    }\n}\nexports.draw = draw;\nfunction download(content, fileName) {\n    let a = document.createElement(\"a\");\n    let file = new Blob([content], { type: \"text/plain\" });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n}\nfunction clearAll() {\n    allOverlays.map(overlay => {\n        overlay.setMap(null);\n    });\n    drawingLayer.setMap(null);\n    drawingLayer = new google.maps.Data();\n    allOverlays = [];\n}\nexports.clearAll = clearAll;\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.customGradient = [\n    'rgba(0, 255, 255, 0)',\n    'rgba(0, 255, 255, 1)',\n    'rgba(0, 191, 255, 1)',\n    'rgba(0, 127, 255, 1)',\n    'rgba(0, 63, 255, 1)',\n    'rgba(0, 0, 255, 1)',\n    'rgba(0, 0, 223, 1)',\n    'rgba(0, 0, 191, 1)',\n    'rgba(0, 0, 159, 1)',\n    'rgba(0, 0, 127, 1)',\n    'rgba(63, 0, 91, 1)',\n    'rgba(127, 0, 63, 1)',\n    'rgba(191, 0, 31, 1)',\n    'rgba(255, 0, 0, 1)'\n];\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\n/// <reference types=\"@types/markerclustererplus\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mapscript_1 = require(\"./mapscript\");\n// import { RegisterSW } from \"./sw-reg\";\nconst clickListeners = require(\"./clickListeners\");\nconst map_1 = require(\"./map\");\n// RegisterSW();\nclickListeners.loadAllDrawingButtons();\nclickListeners.listenersForControlButtons();\nlet map;\nif (window[\"google\"] && window[\"google\"][\"maps\"]) {\n    initMap();\n}\nelse {\n    mapscript_1.loadMapScript(\"geometry,drawing,visualization,places\", (event) => {\n        initMap();\n    });\n}\nfunction initMap() {\n    map = new google.maps.Map(document.getElementById(\"map\"), {\n        /**\n         * Add your map options here\n         *\n         * https://developers-dot-devsite-v2-prod.appspot.com/maps/documentation/javascript/reference/map#MapOptions\n         */\n        backgroundColor: \"white\",\n        draggable: true,\n        mapTypeControl: true,\n        streetViewControl: true,\n        zoomControl: true,\n    });\n    map_1.FunWithMaps(map);\n}\n\n},{\"./clickListeners\":1,\"./map\":6,\"./mapscript\":7}],6:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst styledMap = require(\"./styledMap\");\nconst drawing_1 = require(\"./drawing\");\nconst placesSearch_1 = require(\"./placesSearch\");\nconst directions_1 = require(\"./directions\");\nconst gradient_1 = require(\"./gradient\");\nlet this_map;\nlet london;\nlet dark_theme = true;\nlet markers = [];\nlet infoWindow;\nlet masts;\nlet mastsVisible = false;\nlet markerClusterer;\nlet clustersVisible = false;\nlet heatmap;\nlet lettings;\nlet prevalence;\nlet heatmapVisible = false;\nfunction FunWithMaps(map) {\n    this_map = map;\n    london = coords(51.561638, -0.14);\n    let darkmap = new google.maps.StyledMapType(styledMap.styledMap, {\n        name: \"Dark Map\"\n    });\n    /**\n     * Let's look at the Styled Map.\n     *\n     * Now, why don't you create your own style map,\n     * and add it to the options.\n     */\n    map.setCenter(london);\n    map.mapTypes.set(\"dark_map\", darkmap);\n    map.setMapTypeId(\"dark_map\");\n    const controls = document.getElementById(\"controls\");\n    // Add the legend to the bottom left\n    const legend = document.getElementById(\"legend\");\n    // Add the drawing controls to the top right\n    const drawingControls = document.getElementById(\"drawingControls\");\n    // Add the link to my side to the bottom right\n    const katlink = document.getElementById(\"katlink\");\n    // Add the places search to the top center\n    const place_search = document.getElementById(\"place-search\");\n    // Take a look at the documentation\n    // https://developers.google.com/maps/documentation/javascript/controls#ControlPositioning\n    map.controls[google.maps.ControlPosition.LEFT_TOP].push(controls);\n    map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(legend);\n    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(drawingControls);\n    map.controls[google.maps.ControlPosition.BOTTOM_RIGHT].push(katlink);\n    map.controls[google.maps.ControlPosition.TOP_CENTER].push(place_search);\n    directions_1.directionCalculator(map);\n    placesSearch_1.placesSearch(map);\n    drawing_1.listenForDrawing(map);\n    loadAllMarkers(map);\n    loadHeatmapData();\n    //loadGeoJson(map);\n}\nexports.FunWithMaps = FunWithMaps;\nfunction coords(x, y) {\n    return new google.maps.LatLng(x, y);\n}\nfunction loadAllMarkers(map) {\n    let antenna = {\n        url: \"assets/img/antennabl.png\",\n        scaledSize: new google.maps.Size(40, 40)\n    };\n    fetch(\"assets/data/masts.json\")\n        .then(response => {\n        return response.json();\n    })\n        .then((response_masts) => {\n        masts = response_masts.data;\n        /**\n         * These data contain latitude and longitude information\n         * about electricity masts.\n         * If you look at the data, you will see that\n         * the latitude is at position 18, and the longitude is at position 17.\n         *\n         * In order to create a latitude and longitude object,\n         * we would do that, for each one of the array entries/lines:\n         *\n         * new google.maps.LatLng(\n         *     parseFloat(x[18]),\n         *     parseFloat(x[17])\n         *   )\n         *\n         *\n         * That said, add a marker for each mast on the map,\n         * with the antenna icon.\n         *\n         * Use documentation here:\n         *\n         * https://developers.google.com/maps/documentation/javascript/markers#add\n         */\n        masts.map((x) => {\n            let marker = new google.maps.Marker();\n            /**\n             * Marker contents here\n             */\n            /**\n             * Now, let's create an info window.\n             * The data at position 14 of each row tells us the address of the masts.\n             * When a user clicks on the marker, we want an info window to pop up\n             * displaying only the address of the mast.\n             *\n             */\n            infoWindow = new google.maps.InfoWindow();\n            marker.addListener(\"click\", e => {\n                /**\n                 * Info window here\n                 */\n            });\n            markers.push(marker);\n        });\n    })\n        .catch(error => {\n        console.log(error, \"Error loading asset\");\n    });\n}\nfunction city(city) {\n    if (city === \"lon\") {\n        this_map.setCenter(coords(51.561638, -0.14));\n    }\n    if (city === \"man\") {\n        this_map.setCenter(coords(53.52476717517185, -2.5434842249308414));\n    }\n}\nexports.city = city;\nfunction changeType() {\n    if (!dark_theme) {\n        this_map.setMapTypeId(\"dark_map\");\n    }\n    else {\n        this_map.setMapTypeId(\"roadmap\");\n    }\n    dark_theme = !dark_theme;\n}\nexports.changeType = changeType;\nfunction toggleMasts() {\n    if (!mastsVisible) {\n        markers.map(marker => {\n            marker.setMap(this_map);\n        });\n    }\n    else {\n        markers.map(marker => {\n            marker.setMap(null);\n        });\n    }\n    mastsVisible = !mastsVisible;\n}\nexports.toggleMasts = toggleMasts;\nfunction toggleClusters() {\n    if (!clustersVisible) {\n        markerClusterer = new MarkerClusterer(this_map, markers, {\n            imagePath: \"assets/img/m\"\n        });\n        markerClusterer.setGridSize(10);\n    }\n    else {\n        markerClusterer.clearMarkers();\n    }\n    clustersVisible = !clustersVisible;\n}\nexports.toggleClusters = toggleClusters;\nfunction toggleHeatmap() {\n    if (heatmapVisible) {\n        heatmap.setMap(null);\n    }\n    else {\n        heatmap.setMap(this_map);\n    }\n    heatmapVisible = !heatmapVisible;\n}\nexports.toggleHeatmap = toggleHeatmap;\nfunction changeHeatmapRadius(heatmap_radius) {\n    heatmap.set(\"radius\", heatmap_radius);\n}\nexports.changeHeatmapRadius = changeHeatmapRadius;\nfunction changeCluster(clust_num) {\n    clustersVisible = true;\n    if (markerClusterer) {\n        markerClusterer.clearMarkers();\n    }\n    markerClusterer = new MarkerClusterer(this_map, markers, {\n        imagePath: \"assets/img/m\"\n    });\n    markerClusterer.setGridSize(clust_num);\n}\nexports.changeCluster = changeCluster;\nfunction loadHeatmapData() {\n    fetch(\"assets/data/letting.json\")\n        .then(response => {\n        return response.json();\n    })\n        .then((data) => {\n        lettings = data.data;\n        let heatmapData = [];\n        /**\n         *\n         * Let's look at our data\n         * and understand what this function does\n         */\n        lettings.map((x) => {\n            if (x[24] && x[23]) {\n                heatmapData.push({\n                    location: new google.maps.LatLng(parseFloat(x[24]), parseFloat(x[23])),\n                    weight: parseInt(x[15], 10)\n                });\n            }\n        });\n        heatmap = new google.maps.visualization.HeatmapLayer({\n            data: heatmapData\n        });\n        heatmap.set(\"gradient\", gradient_1.customGradient);\n        heatmap.set(\"radius\", 40);\n        heatmap.set(\"opacity\", 1);\n    })\n        .catch(error => {\n        console.log(error);\n    });\n}\nfunction loadGeoJson(map) {\n    /**\n     * Find the function that loads a GeoJson file in\n     * the documentation, and load the file from this path\n     *\n     * https://developers.google.com/maps/documentation/javascript/datalayer#load_geojson\n     *\n     * \"assets/data/lonely.geojson\"\n     */\n    /**\n     * Fix this code so that whenever we mouseover one of the\n     * elements, the value is displayed on our page.\n     *\n     * https://developers.google.com/maps/documentation/javascript/datalayer#change_appearance_dynamically\n     */\n    /*\n    map.data.setStyle((feature: any) => {\n      // let lon =\n      /**\n       * Use the documentation to receive the\n       * Prevalence value of each feature.\n       * https://developers.google.com/maps/documentation/javascript/datalayer#declarative_style_rules\n       *\n       *\n       * If you do not undestand what the function mapNumber does, read it and ask me!\n       \n      // let value = 255 - Math.round(mapNumber(lon, 0, 5, 0, 255));\n      // let color = \"rgb(\" + value + \",\" + value + \",\" + 0 + \")\";\n      // return {\n      //   fillColor: color,\n      //   strokeWeight: 1\n      // };\n    });\n    infoWindow = new google.maps.InfoWindow();\n    /**\n     * Let's create an info window which will display the prevalence information\n     * when a shape/feature is clicked.\n    \n    map.data.addListener(\"click\", e => {\n      /**\n       * Info window here\n       \n    });\n    */\n}\n\n},{\"./directions\":2,\"./drawing\":3,\"./gradient\":4,\"./placesSearch\":8,\"./styledMap\":9}],7:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction loadMapScript(libraries, c) {\n    if (!document.getElementById(\"gmap\")) {\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src =\n            \"https://maps.googleapis.com/maps/api/js?key=AIzaSyD1T1cGp2Wxr0QC5ipmjTjwbOgV0L2wqg8\";\n        if (libraries && libraries.length > 0) {\n            script.src = script.src + \"&libraries=\" + libraries;\n        }\n        script.id = \"gmap\";\n        script.addEventListener(\"load\", e => {\n            c(e);\n        }, false);\n        document.body.appendChild(script);\n    }\n}\nexports.loadMapScript = loadMapScript;\n\n},{}],8:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction placesSearch(map) {\n    const autocomplete_input = document.getElementById(\"place-input\");\n    const autocomplete = new google.maps.places.Autocomplete(autocomplete_input);\n    autocomplete.bindTo(\"bounds\", map);\n    autocomplete.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]);\n    const marker = new google.maps.Marker({\n        map: map,\n        anchorPoint: new google.maps.Point(0, -29)\n    });\n    autocomplete.addListener(\"place_changed\", function () {\n        marker.setVisible(false);\n        const place = autocomplete.getPlace();\n        if (!place.geometry) {\n            window.alert(\"No details available for input: '\" + place.name + \"'\");\n            return;\n        }\n        if (place.geometry.viewport) {\n            map.fitBounds(place.geometry.viewport);\n        }\n        else {\n            map.setCenter(place.geometry.location);\n            map.setZoom(17);\n        }\n        marker.setPosition(place.geometry.location);\n        marker.setVisible(true);\n        const infowindow = new google.maps.InfoWindow();\n        const infowindowContent = document.getElementById(\"infowindow-content\");\n        infowindow.setContent(infowindowContent);\n        let address = \"\";\n        /**\n         * Let's take a look at the placeresult interface\n         * https://developers.google.com/maps/documentation/javascript/reference/places-service#PlaceResult\n         *\n         * And let's add opening hours to our results, if they exist.\n         *\n         * We can also add the ratings of each place.\n         * Let's take a look.\n         */\n        if (place.address_components) {\n            address = [\n                (place.address_components[0] &&\n                    place.address_components[0].short_name) ||\n                    \"\",\n                (place.address_components[1] &&\n                    place.address_components[1].short_name) ||\n                    \"\",\n                (place.address_components[2] &&\n                    place.address_components[2].short_name) ||\n                    \"\"\n            ].join(\" \");\n        }\n        document.getElementById(\"place-icon\").src =\n            place.icon;\n        document.getElementById(\"place-name\").textContent =\n            place.name;\n        document.getElementById(\"place-address\").textContent = address;\n        infowindow.open(map, marker);\n    });\n    document\n        .getElementById(\"use-strict-bounds\")\n        .addEventListener(\"change\", event => {\n        const target = event.target;\n        autocomplete.setOptions({ strictBounds: target.checked });\n    });\n}\nexports.placesSearch = placesSearch;\n\n},{}],9:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.styledMap = [\n    { elementType: \"geometry\", stylers: [{ color: \"#9a9a9a\" }] },\n    { elementType: \"labels.text.fill\", stylers: [{ color: \"#111111\" }] },\n    { elementType: \"labels.text.stroke\", stylers: [{ visibility: \"off\" }] },\n    {\n        featureType: \"administrative\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"administrative.land_parcel\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"administrative.land_parcel\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"landscape.natural\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"poi\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"poi\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }, { visibility: \"simplified\" }]\n    },\n    {\n        featureType: \"poi.park\",\n        elementType: \"geometry.fill\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"poi.park\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }]\n    },\n    {\n        featureType: \"poi.business\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"road\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#aaaaaa\" }]\n        // stylers: [{color: '#ff0000'}]\n    },\n    {\n        featureType: \"road.arterial\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#999999\" }]\n        // stylers: [{color: '#ff0000'}]\n    },\n    {\n        featureType: \"road.highway\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#666666\" }]\n        // stylers: [{color: '#ff0000'}]\n    },\n    {\n        featureType: \"road.highway\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"road.highway.controlled_access\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#444444\" }]\n    },\n    {\n        featureType: \"road.highway.controlled_access\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"road.local\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }]\n    },\n    {\n        featureType: \"transit.line\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"transit.line\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }]\n    },\n    {\n        featureType: \"transit.line\",\n        elementType: \"labels.text.stroke\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"transit.station\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"water\",\n        elementType: \"geometry.fill\",\n        stylers: [{ color: \"#222222\" }]\n    },\n    {\n        featureType: \"water\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#222222\" }]\n    }\n];\n\n},{}]},{},[5])\n\n","export function directionCalculator(map: google.maps.Map) {\n  const directionsService = new google.maps.DirectionsService();\n  const directionsRenderer = new google.maps.DirectionsRenderer();\n  directionsRenderer.setMap(map);\n\n  const service: google.maps.DistanceMatrixService = new google.maps.DistanceMatrixService();\n\n  const autocomplete_input_origin: HTMLInputElement = document.getElementById(\n    \"origin\"\n  ) as HTMLInputElement;\n  const autocomplete_input_destination: HTMLInputElement = document.getElementById(\n    \"destination\"\n  ) as HTMLInputElement;\n  const onChangeHandler = () => {\n    calculateAndDisplayRoute(\n      directionsService,\n      directionsRenderer,\n      service,\n      autocomplete_input_origin,\n      autocomplete_input_destination\n    );\n  };\n\n  const autocomplete_origin = new google.maps.places.Autocomplete(\n    autocomplete_input_origin\n  );\n  const autocomplete_destination = new google.maps.places.Autocomplete(\n    autocomplete_input_destination\n  );\n\n  autocomplete_origin.setFields([\n    \"address_components\",\n    \"geometry\",\n    \"icon\",\n    \"name\"\n  ]);\n  autocomplete_destination.setFields([\n    \"address_components\",\n    \"geometry\",\n    \"icon\",\n    \"name\"\n  ]);\n\n  autocomplete_origin.addListener(\"place_changed\", () => {\n    const place = autocomplete_origin.getPlace();\n    onChangeHandler();\n    if (!place.geometry) {\n      window.alert(\"No details available for input: '\" + place.name + \"'\");\n      return;\n    }\n  });\n\n  autocomplete_destination.addListener(\"place_changed\", () => {\n    const place = autocomplete_destination.getPlace();\n    onChangeHandler();\n    if (!place.geometry) {\n      window.alert(\"No details available for input: '\" + place.name + \"'\");\n      return;\n    }\n  });\n}\n\nfunction calculateAndDisplayRoute(\n  directionsService: google.maps.DirectionsService,\n  directionsRenderer: google.maps.DirectionsRenderer,\n  service: google.maps.DistanceMatrixService,\n  origin: HTMLInputElement,\n  destination: HTMLInputElement\n) {\n  if (\n    origin.value &&\n    origin.value.length > 0 &&\n    destination.value &&\n    destination.value.length > 0\n  ) {\n    /**\n     * Let's take a look at the Directions Service documentation.\n     * See the Directions Request class.\n     * https://developers.google.com/maps/documentation/javascript/reference/directions#DirectionsRequest\n     *\n     * What other options can we add?\n     * Let's change the travel mode.\n     * (https://developers.google.com/maps/documentation/javascript/reference/directions#TravelMode)\n     *\n     * Or, let's keep driving, but avoid tolls.\n     */\n    directionsService.route(\n      {\n        origin: { query: origin.value },\n        destination: { query: destination.value },\n        travelMode: google.maps.TravelMode.DRIVING\n      },\n      (response: any, status: any) => {\n        if (status === \"OK\") {\n          directionsRenderer.setDirections(response);\n          service.getDistanceMatrix(\n            {\n              origins: [origin.value],\n              destinations: [destination.value],\n              travelMode: google.maps.TravelMode.DRIVING,\n              unitSystem: google.maps.UnitSystem.METRIC\n            },\n            (response, status) => {\n              if (status !== \"OK\") {\n                alert(\"Error was: \" + status);\n              } else {\n                /**\n                 *\n                 * What's going on here?\n                 * What is the result of the Distance Matrix service?\n                 *\n                 * Take a look here:\n                 * https://developers.google.com/maps/documentation/javascript/reference/distance-matrix#DistanceMatrixResponseElement\n                 *\n                 * Do we want to display anything else?\n                 */\n                (document.getElementById(\n                  \"distance\"\n                ) as HTMLSpanElement).textContent =\n                  response.rows[0].elements[0].distance.text +\n                  \" \" +\n                  response.rows[0].elements[0].duration.text;\n              }\n            }\n          );\n        } else {\n          window.alert(\"Directions request failed due to \" + status);\n        }\n      }\n    );\n  }\n}\n","import {} from \"google-maps\";\n\nlet drawingManager: google.maps.drawing.DrawingManager;\nlet drawingLayer: google.maps.Data;\nlet allOverlays: any[] = [];\n\nexport function listenForDrawing(map: google.maps.Map) {\n  drawingManager = new google.maps.drawing.DrawingManager({\n    drawingMode: null,\n    drawingControl: false // i have my custom tools so i don't need the defaults to be displayed\n  });\n  drawingManager.setMap(map);\n  drawingLayer = new google.maps.Data();\n  drawingManager.addListener(\"overlaycomplete\", event => {\n    allOverlays.push(event.overlay);\n    event.overlay.addListener(\"rightclick\", () => {\n      event.overlay.setMap(null);\n    });\n    switch (event.type) {\n      case \"polygon\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([\n              event.overlay.getPath().getArray()\n            ])\n          })\n        );\n        /**\n         * We could do this, here:\n         *\n         * drawingLayer.setMap(map);\n         *\n         * The reason we are not doing this,\n         * is because we want to keep the custom icons\n         * showing. And if we add the data layer on the map,\n         * it will use the default.\n         */\n        map.data.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([\n              event.overlay.getPath().getArray()\n            ])\n          })\n        );\n        break;\n      case \"rectangle\":\n        let bounds = event.overlay.getBounds();\n        let points = [\n          bounds.getSouthWest(),\n          {\n            lat: bounds.getSouthWest().lat(),\n            lng: bounds.getNorthEast().lng()\n          },\n          bounds.getNorthEast(),\n          {\n            lng: bounds.getSouthWest().lng(),\n            lat: bounds.getNorthEast().lat()\n          }\n        ];\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([points])\n          })\n        );\n        map.data.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([points])\n          })\n        );\n        break;\n      case \"polyline\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.LineString(\n              event.overlay.getPath().getArray()\n            )\n          })\n        );\n        map.data.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.LineString(\n              event.overlay.getPath().getArray()\n            )\n          })\n        );\n        break;\n      case \"circle\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            properties: {\n              radius: event.overlay.getRadius()\n            },\n            geometry: new google.maps.Data.Point(event.overlay.getCenter())\n          })\n        );\n        map.data.add(\n          new google.maps.Data.Feature({\n            properties: {\n              radius: event.overlay.getRadius()\n            }\n          })\n        );\n        break;\n      case \"marker\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Point(event.overlay.getPosition())\n          })\n        );\n        break;\n      default:\n        console.log(\"end\");\n    }\n  });\n}\n\nexport function draw(type: string) {\n  switch (type) {\n    case \"marker\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n      let point: google.maps.Icon = {\n        url: \"assets/img/point.png\",\n        scaledSize: new google.maps.Size(30, 30)\n      };\n\n      drawingManager.setOptions({\n        markerOptions: {\n          icon: point,\n          clickable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"cat\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n      let cat: google.maps.Icon = {\n        url: \"assets/img/cat.png\",\n        scaledSize: new google.maps.Size(70, 70)\n      };\n      drawingManager.setOptions({\n        markerOptions: {\n          icon: cat,\n          clickable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"polygon\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n      drawingManager.setOptions({\n        polygonOptions: {\n          fillColor: \"#9c4d4f\",\n          fillOpacity: 0.5,\n          strokeWeight: 2,\n          strokeColor: \"#401619\",\n          clickable: true,\n          editable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"square\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);\n      drawingManager.setOptions({\n        rectangleOptions: {\n          fillColor: \"#fff82e\",\n          fillOpacity: 0.5,\n          strokeWeight: 2,\n          strokeColor: \"#c8a535\",\n          clickable: true,\n          editable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"polyline\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);\n      drawingManager.setOptions({\n        polylineOptions: {\n          strokeWeight: 2,\n          strokeColor: \"#00b801\",\n          clickable: true,\n          editable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"circle\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n      drawingManager.setOptions({\n        circleOptions: {\n          fillColor: \"#00b801\",\n          fillOpacity: 0.5,\n          strokeWeight: 2,\n          strokeColor: \"#00b801\",\n          clickable: true,\n          editable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"pan\":\n      drawingManager.setDrawingMode(null);\n      break;\n    case \"save\":\n      drawingManager.setDrawingMode(null);\n      drawingLayer.toGeoJson(obj => {\n        console.log(obj);\n        download(JSON.stringify(obj), \"drawingData.txt\");\n      });\n      break;\n    default:\n      drawingManager.setDrawingMode(null);\n  }\n}\n\nfunction download(content: string, fileName: string) {\n  let a = document.createElement(\"a\");\n  let file = new Blob([content], { type: \"text/plain\" });\n  a.href = URL.createObjectURL(file);\n  a.download = fileName;\n  a.click();\n}\n\nexport function clearAll() {\n  allOverlays.map(overlay => {\n    overlay.setMap(null);\n  });\n  drawingLayer.setMap(null);\n  drawingLayer = new google.maps.Data();\n  allOverlays = [];\n}\n","export const customGradient = [\n    'rgba(0, 255, 255, 0)',\n    'rgba(0, 255, 255, 1)',\n    'rgba(0, 191, 255, 1)',\n    'rgba(0, 127, 255, 1)',\n    'rgba(0, 63, 255, 1)',\n    'rgba(0, 0, 255, 1)',\n    'rgba(0, 0, 223, 1)',\n    'rgba(0, 0, 191, 1)',\n    'rgba(0, 0, 159, 1)',\n    'rgba(0, 0, 127, 1)',\n    'rgba(63, 0, 91, 1)',\n    'rgba(127, 0, 63, 1)',\n    'rgba(191, 0, 31, 1)',\n    'rgba(255, 0, 0, 1)'\n  ];","/// <reference types=\"@types/markerclustererplus\" />\n\nimport { loadMapScript } from \"./mapscript\";\n// import { RegisterSW } from \"./sw-reg\";\nimport * as clickListeners from \"./clickListeners\";\nimport { FunWithMaps } from \"./map\";\nimport {} from \"google-maps\";\n\n// RegisterSW();\nclickListeners.loadAllDrawingButtons();\nclickListeners.listenersForControlButtons();\n\nlet map: google.maps.Map;\n\nif (window[\"google\"] && window[\"google\"][\"maps\"]) {\n  initMap();\n} else {\n  loadMapScript(\"geometry,drawing,visualization,places\", (event: Event) => {\n    initMap();\n  });\n}\n\nfunction initMap() {\n  map = new google.maps.Map(document.getElementById(\"map\"), {\n    /**\n     * Add your map options here\n     *\n     * https://developers-dot-devsite-v2-prod.appspot.com/maps/documentation/javascript/reference/map#MapOptions\n     */\n     backgroundColor: \"white\",\n     draggable: true,\n     mapTypeControl: true,\n     streetViewControl: true,\n     zoomControl: true,\n\n  });\n  FunWithMaps(map);\n}\n","/// <reference types=\"@types/markerclustererplus\" />\nimport {} from \"google-maps\";\nimport * as styledMap from \"./styledMap\";\nimport { listenForDrawing } from \"./drawing\";\nimport { placesSearch } from \"./placesSearch\";\nimport { directionCalculator } from \"./directions\";\n\nimport { customGradient } from \"./gradient\";\nimport { mapNumber } from \"./mapNumber\";\n\nlet this_map: google.maps.Map;\nlet london: google.maps.LatLng;\nlet dark_theme: boolean = true;\nlet markers: google.maps.Marker[] = [];\nlet infoWindow: google.maps.InfoWindow;\n\nlet masts: string[][];\nlet mastsVisible: boolean = false;\nlet markerClusterer: MarkerClusterer;\nlet clustersVisible: boolean = false;\n\nlet heatmap: google.maps.visualization.HeatmapLayer;\nlet lettings: string[][];\n\nlet prevalence: string;\nlet heatmapVisible: boolean = false;\n\nexport function FunWithMaps(map: google.maps.Map) {\n  this_map = map;\n  london = coords(51.561638, -0.14);\n  let darkmap = new google.maps.StyledMapType(\n    styledMap.styledMap as google.maps.MapTypeStyle[],\n    {\n      name: \"Dark Map\"\n    }\n  );\n\n  /**\n   * Let's look at the Styled Map.\n   *\n   * Now, why don't you create your own style map,\n   * and add it to the options.\n   */\n\n  map.setCenter(london);\n  map.mapTypes.set(\"dark_map\", darkmap);\n  map.setMapTypeId(\"dark_map\");\n\n  const controls: HTMLElement = document.getElementById(\"controls\");\n\n  // Add the legend to the bottom left\n  const legend: HTMLElement = document.getElementById(\"legend\");\n\n  // Add the drawing controls to the top right\n  const drawingControls: HTMLElement = document.getElementById(\n    \"drawingControls\"\n  );\n\n  // Add the link to my side to the bottom right\n  const katlink: HTMLElement = document.getElementById(\"katlink\");\n\n  // Add the places search to the top center\n  const place_search: HTMLElement = document.getElementById(\"place-search\");\n\n  // Take a look at the documentation\n  // https://developers.google.com/maps/documentation/javascript/controls#ControlPositioning\n  map.controls[google.maps.ControlPosition.LEFT_TOP].push(controls);\n  map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(legend);\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(drawingControls);\n  map.controls[google.maps.ControlPosition.BOTTOM_RIGHT].push(katlink);\n  map.controls[google.maps.ControlPosition.TOP_CENTER].push(place_search);\n\n  directionCalculator(map);\n  placesSearch(map);\n  listenForDrawing(map);\n  loadAllMarkers(map);\n  loadHeatmapData();\n  //loadGeoJson(map);\n}\n\nfunction coords(x: number, y: number) {\n  return new google.maps.LatLng(x, y);\n}\n\nfunction loadAllMarkers(map: google.maps.Map): void {\n  let antenna: google.maps.Icon = {\n    url: \"assets/img/antennabl.png\",\n    scaledSize: new google.maps.Size(40, 40)\n  };\n  fetch(\"assets/data/masts.json\")\n    .then(response => {\n      return response.json();\n    })\n    .then((response_masts: { meta: {}; data: string[][] }) => {\n      masts = response_masts.data;\n\n      /**\n       * These data contain latitude and longitude information\n       * about electricity masts.\n       * If you look at the data, you will see that\n       * the latitude is at position 18, and the longitude is at position 17.\n       *\n       * In order to create a latitude and longitude object,\n       * we would do that, for each one of the array entries/lines:\n       *\n       * new google.maps.LatLng(\n       *     parseFloat(x[18]),\n       *     parseFloat(x[17])\n       *   )\n       *\n       *\n       * That said, add a marker for each mast on the map,\n       * with the antenna icon.\n       *\n       * Use documentation here:\n       *\n       * https://developers.google.com/maps/documentation/javascript/markers#add\n       */\n\n      masts.map((x: string[]) => {\n        let marker = new google.maps.Marker();\n        /**\n         * Marker contents here\n         */\n\n        /**\n         * Now, let's create an info window.\n         * The data at position 14 of each row tells us the address of the masts.\n         * When a user clicks on the marker, we want an info window to pop up\n         * displaying only the address of the mast.\n         *\n         */\n        infoWindow = new google.maps.InfoWindow();\n        marker.addListener(\"click\", e => {\n          /**\n           * Info window here\n           */\n        });\n        markers.push(marker);\n      });\n    })\n    .catch(error => {\n      console.log(error, \"Error loading asset\");\n    });\n}\n\nexport function city(city: string) {\n  if (city === \"lon\") {\n    this_map.setCenter(coords(51.561638, -0.14));\n  }\n  if (city === \"man\") {\n    this_map.setCenter(coords(53.52476717517185, -2.5434842249308414));\n  }\n}\n\nexport function changeType() {\n  if (!dark_theme) {\n    this_map.setMapTypeId(\"dark_map\");\n  } else {\n    this_map.setMapTypeId(\"roadmap\");\n  }\n  dark_theme = !dark_theme;\n}\nexport function toggleMasts(): void {\n  if (!mastsVisible) {\n    markers.map(marker => {\n      marker.setMap(this_map);\n    });\n  } else {\n    markers.map(marker => {\n      marker.setMap(null);\n    });\n  }\n  mastsVisible = !mastsVisible;\n}\n\nexport function toggleClusters(): void {\n  if (!clustersVisible) {\n    markerClusterer = new MarkerClusterer(this_map, markers, {\n      imagePath: \"assets/img/m\"\n    });\n    markerClusterer.setGridSize(10);\n  } else {\n    markerClusterer.clearMarkers();\n  }\n  clustersVisible = !clustersVisible;\n}\n\nexport function toggleHeatmap(): void {\n  if (heatmapVisible) {\n    heatmap.setMap(null);\n  } else {\n    heatmap.setMap(this_map);\n  }\n  heatmapVisible = !heatmapVisible;\n}\nexport function changeHeatmapRadius(heatmap_radius: number) {\n  heatmap.set(\"radius\", heatmap_radius);\n}\nexport function changeCluster(clust_num: number): void {\n  clustersVisible = true;\n  if (markerClusterer) {\n    markerClusterer.clearMarkers();\n  }\n  markerClusterer = new MarkerClusterer(this_map, markers, {\n    imagePath: \"assets/img/m\"\n  });\n  markerClusterer.setGridSize(clust_num);\n}\n\nfunction loadHeatmapData() {\n  fetch(\"assets/data/letting.json\")\n    .then(response => {\n      return response.json();\n    })\n\n    .then((data: { meta: {}; data: string[][] }) => {\n      lettings = data.data;\n      let heatmapData: {}[] = [];\n\n      /**\n       *\n       * Let's look at our data\n       * and understand what this function does\n       */\n      lettings.map((x: string[]) => {\n        if (x[24] && x[23]) {\n          heatmapData.push({\n            location: new google.maps.LatLng(\n              parseFloat(x[24]),\n              parseFloat(x[23])\n            ),\n            weight: parseInt(x[15], 10)\n          });\n        }\n      });\n      heatmap = new google.maps.visualization.HeatmapLayer({\n        data: heatmapData\n      });\n      heatmap.set(\"gradient\", customGradient);\n      heatmap.set(\"radius\", 40);\n      heatmap.set(\"opacity\", 1);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}\nfunction loadGeoJson(map: google.maps.Map) {\n  /**\n   * Find the function that loads a GeoJson file in\n   * the documentation, and load the file from this path\n   *\n   * https://developers.google.com/maps/documentation/javascript/datalayer#load_geojson\n   *\n   * \"assets/data/lonely.geojson\"\n   */\n\n  /**\n   * Fix this code so that whenever we mouseover one of the\n   * elements, the value is displayed on our page.\n   *\n   * https://developers.google.com/maps/documentation/javascript/datalayer#change_appearance_dynamically\n   */\n  /*\n  map.data.setStyle((feature: any) => {\n    // let lon =\n    /**\n     * Use the documentation to receive the\n     * Prevalence value of each feature.\n     * https://developers.google.com/maps/documentation/javascript/datalayer#declarative_style_rules\n     *\n     *\n     * If you do not undestand what the function mapNumber does, read it and ask me!\n     \n    // let value = 255 - Math.round(mapNumber(lon, 0, 5, 0, 255));\n    // let color = \"rgb(\" + value + \",\" + value + \",\" + 0 + \")\";\n    // return {\n    //   fillColor: color,\n    //   strokeWeight: 1\n    // };\n  });\n  infoWindow = new google.maps.InfoWindow();\n  /**\n   * Let's create an info window which will display the prevalence information\n   * when a shape/feature is clicked.\n  \n  map.data.addListener(\"click\", e => {\n    /**\n     * Info window here\n     \n  });\n  */\n}\n","export function loadMapScript(libraries: string, c: Function): void {\n  if (!document.getElementById(\"gmap\")) {\n    const script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src =\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyD1T1cGp2Wxr0QC5ipmjTjwbOgV0L2wqg8\";\n    if (libraries && libraries.length > 0) {\n      script.src = script.src + \"&libraries=\" + libraries;\n    }\n    script.id = \"gmap\";\n    script.addEventListener(\n      \"load\",\n      e => {\n        c(e);\n      },\n      false\n    );\n    document.body.appendChild(script);\n  }\n}\n","export function placesSearch(map: google.maps.Map) {\n  const autocomplete_input: HTMLInputElement = document.getElementById(\n    \"place-input\"\n  ) as HTMLInputElement;\n\n  const autocomplete = new google.maps.places.Autocomplete(autocomplete_input);\n  autocomplete.bindTo(\"bounds\", map);\n  autocomplete.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]);\n  const marker = new google.maps.Marker({\n    map: map,\n    anchorPoint: new google.maps.Point(0, -29)\n  });\n\n  autocomplete.addListener(\"place_changed\", function() {\n    marker.setVisible(false);\n    const place = autocomplete.getPlace();\n    if (!place.geometry) {\n      window.alert(\"No details available for input: '\" + place.name + \"'\");\n      return;\n    }\n\n    if (place.geometry.viewport) {\n      map.fitBounds(place.geometry.viewport);\n    } else {\n      map.setCenter(place.geometry.location);\n      map.setZoom(17);\n    }\n    marker.setPosition(place.geometry.location);\n    marker.setVisible(true);\n\n    const infowindow = new google.maps.InfoWindow();\n    const infowindowContent = document.getElementById(\"infowindow-content\");\n    infowindow.setContent(infowindowContent);\n\n    let address = \"\";\n\n    /**\n     * Let's take a look at the placeresult interface\n     * https://developers.google.com/maps/documentation/javascript/reference/places-service#PlaceResult\n     *\n     * And let's add opening hours to our results, if they exist.\n     *\n     * We can also add the ratings of each place.\n     * Let's take a look.\n     */\n    if (place.address_components) {\n      address = [\n        (place.address_components[0] &&\n          place.address_components[0].short_name) ||\n          \"\",\n        (place.address_components[1] &&\n          place.address_components[1].short_name) ||\n          \"\",\n        (place.address_components[2] &&\n          place.address_components[2].short_name) ||\n          \"\"\n      ].join(\" \");\n    }\n    (document.getElementById(\"place-icon\") as HTMLImageElement).src =\n      place.icon;\n    (document.getElementById(\"place-name\") as HTMLSpanElement).textContent =\n      place.name;\n    (document.getElementById(\n      \"place-address\"\n    ) as HTMLSpanElement).textContent = address;\n\n    infowindow.open(map, marker);\n  });\n\n  document\n    .getElementById(\"use-strict-bounds\")\n    .addEventListener(\"change\", event => {\n      const target: HTMLInputElement = event.target as HTMLInputElement;\n      autocomplete.setOptions({ strictBounds: target.checked });\n    });\n}\n","export const styledMap = [\n  { elementType: \"geometry\", stylers: [{ color: \"#9a9a9a\" }] },\n  { elementType: \"labels.text.fill\", stylers: [{ color: \"#111111\" }] },\n  { elementType: \"labels.text.stroke\", stylers: [{ visibility: \"off\" }] },\n  {\n    featureType: \"administrative\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"administrative.land_parcel\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"administrative.land_parcel\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"landscape.natural\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }, { visibility: \"simplified\" }]\n  },\n  {\n    featureType: \"poi.park\",\n    elementType: \"geometry.fill\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"poi.park\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }]\n  },\n  {\n    featureType: \"poi.business\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"road\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#aaaaaa\" }]\n    // stylers: [{color: '#ff0000'}]\n  },\n  {\n    featureType: \"road.arterial\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#999999\" }]\n    // stylers: [{color: '#ff0000'}]\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#666666\" }]\n    // stylers: [{color: '#ff0000'}]\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"road.highway.controlled_access\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#444444\" }]\n  },\n  {\n    featureType: \"road.highway.controlled_access\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"road.local\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }]\n  },\n  {\n    featureType: \"transit.line\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"transit.line\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }]\n  },\n  {\n    featureType: \"transit.line\",\n    elementType: \"labels.text.stroke\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"transit.station\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"water\",\n    elementType: \"geometry.fill\",\n    stylers: [{ color: \"#222222\" }]\n  },\n  {\n    featureType: \"water\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#222222\" }]\n  }\n];\n"]}